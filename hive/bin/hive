#!/usr/bin/env bash
# __    __         __                  _                                            _                      _
#/ / /\ \ \___    /__\ ___  __ _ _   _(_)_ __ ___     /\/\   ___  _ __ ___    /\/\ (_)_ __   ___ _ __ __ _| |___
#\ \/  \/ / _ \  / \/// _ \/ _\`| | | | | '__/ _ \   /    \ / _ \| '__/ _ \  /    \| | '_ \ / _ \ '__/ _\`| / __|
# \  /\  /  __/ / _  \  __/ (_| | |_| | | | |  __/  / /\/\ \ (_) | | |  __/ / /\/\ \ | | | |  __/ | | (_| | \__ \
#  \/  \/ \___| \/ \_/\___|\__, |\__,_|_|_|  \___|  \/    \/\___/|_|  \___| \/    \/_|_| |_|\___|_|  \__,_|_|___/
#                             |_|
source /etc/environment
export $(cat /etc/environment | grep -vE '^$|^#' | cut -d= -f1) #export all variables from file
#export PATH
#export CUDA_DEVICE_ORDER
export HOME=/home/user #required by ccminer

#[ -t 1 ] &&
. colors #use them anyway

function echo2 {
	echo -e "$1" > /dev/tty1
	echo -e "$1"
}


cat /proc/mounts | grep -q /hive-config
if [[ $? -ne 0 && ! -e /hive-config/rig.conf ]]; then
	#0 - mounted (grep ok), 1 - grep not found (unmounted)
	#checking for rig.conf is for very old systems without a mounted config partition
	echo2 "${RED}Config directory /hive-config is not mounted, please check filesystem.${NOCOLOR}"
	echo2 "${RED}This needs to be fixed for proper system operation.${NOCOLOR}"
	echo2 "${YELLOW}Alt+F2 to switch to other terminal and login.${NOCOLOR}"

	#nohup sudo -i bash > /dev/null 2>&1 &
	#systemctl restart hive-console

	exit 1
fi



if [[ -e /hive-config/branding-logo.txt ]]; then
	BRANDING_LOGO=$(cat /hive-config/branding-logo.txt; echo .) #echo . to preserve new lines
	BRANDING_LOGO=${BRANDING_LOGO%.} #remove last .
else
	BRANDING_LOGO="
 _______ _______ ___ ___ _______
|   |   |_     _|   |   |    ___|
|       |_|   |_|   |   |    ___|
|___|___|_______|\_____/|_______|

"
fi
BRANDING_LOGO="${BYELLOW}${BRANDING_LOGO}${NOCOLOR}"




#Check for proxy var. Or agent and others started from here will not see it
. http_proxy.sh



#Make directory in RAM
mkdir -p /run/hive

#Make directory for miners logs in /var/log/miner
#miner logdirscreate

#ensure we have unix config
dos2unix-safe /hive-config/rig.conf
[[ -e /hive-config/ref_id.txt ]] && dos2unix-safe /hive-config/ref_id.txt


export GPU_COUNT_AMD=`gpu-detect AMD`
export GPU_COUNT_NVIDIA=`gpu-detect NVIDIA`
export GPU_FIRST_AMD=`gpu-detect AMD_FIRST`
export GPU_FIRST_NVIDIA=`gpu-detect NVIDIA_FIRST`

#cd $(dirname $(realpath $0))

uname="`uname -sr`   ${YELLOW}H `dpkg -s hive | grep '^Version: ' | sed 's/Version: //'`${NOCOLOR}"

msg=$(cat <<EOF
$uname
${BRANDING_LOGO}
${CYAN}`hostname`${NOCOLOR}
${BPURPLE}`hostname -I`${NOCOLOR}

EOF
)

echo2 "$msg"


### OpenVPN #############################################################################################
openvpn-install
#will wait for interface


### Check for internal GPU ##############################################################################

if [[ $GPU_FIRST_AMD == 0 && $GPU_FIRST_NVIDIA == 0 ]]; then
	warnmsg=$(cat <<WARN
$YELLOW
#####################################################################
###
### You have connected monitor to integrated GPU on the motherboard?
### Don't do this. Connect monitor to the 1st external GPU (in 16x slot).
### However we will try to continue in 5 seconds.
###
#####################################################################
$NOCOLOR
WARN
)

	#rm config so maybe xorg autoconfig will work
	rm /etc/X11/xorg.conf

	echo2 "$warnmsg"
	sleep 5
fi

### Nvidia not first warning ############################################################################
if [ $GPU_FIRST_AMD -gt 0 ] && [ $GPU_COUNT_NVIDIA -gt 0 ]; then
	warnmsg=$(cat <<WARN
$YELLOW
#####################################################################
###
###   WARNING
###
###   You have mix of NVIDIA and AMD cards.
###   AMD is detected to be in the first slot.
###   It's better to have NVIDIA in the 1st PCIe slot for OC to work.
###   X server will crash in this configuration.
###
#####################################################################
###   Boot will continue in 15 seconds so you may try
#####################################################################
$NOCOLOR
WARN
)

	echo2 "$warnmsg"
	sleep 15
fi



### modprobe drivers, nvidia better to be first ##################################################################
if [ $GPU_COUNT_NVIDIA -gt 0 ]; then
	echo2 "modprobe ${GREEN}NVIDIA${NOCOLOR} drivers"
	modprobe nvidia_drm modeset=1
	modprobe nvidia

	echo2 "`nvidia-xorg`"
fi
if [ $GPU_COUNT_AMD -gt 0 ]; then

	if [[ -e /opt/dkms-vega/amdgpu.ko ]]; then
		. /hive/sbin/opencl_insert
	fi

	echo2 "modprobe ${RED}AMD${NOCOLOR} drivers"
	modprobe amdgpu
	#if there are nvidias then their config should be used, amd will not work anyways
	if [ $GPU_COUNT_NVIDIA -eq 0 ]; then
		echo2 "Copying AMD Xorg config"
		cp /hive/etc/xorg.conf.amd /etc/X11/xorg.conf
	fi

	echo2 "`amd-save-pp_tables`"

	#Moved here from gpu-detect
	amdmeminfo -q -s -n > $AMDMEMINFO_FILE 2>&1
	[[ -f $AMDMEMINFO_FILE ]] && amdmeminfo=`cat $AMDMEMINFO_FILE`
	#amdmeminfo can fail from the first time and skip some cards, let's rerun it
	if [[ `echo "$amdmeminfo" | wc -l` != $GPU_COUNT_AMD ]]; then
		sleep 0.1
		amdmeminfo -q -s -n > $AMDMEMINFO_FILE 2>&1
	fi
fi
#sleep 1


gpu-detect listjson > $GPU_DETECT_JSON


### Loading continues ##################################################################

#commented, no one will see it
### tail syslog ############################################################################
#TAILPID=`ps aux | grep "tail -f /var/log/syslog" | grep -v grep | awk '{print $2}'`
#[ "0$TAILPID" != "0" ] && kill -9 $TAILPID
#tail -f /var/log/syslog > /dev/tty1 &


motd

#Run watchdog pinger ASAP. Will detect device.
echo2 "> Detecting watchdogs"
echo2 "`/hive/opt/watchdoginua/watchdoginua.sh`"
echo2 "`/hive/opt/opendev/watchdog-opendev.sh`"
echo2 "`/hive/opt/esonics/watchdog-esonics.sh`"
echo2 "`/hive/opt/qinheng/hl340.sh`"
echo2 "`/hive/opt/srrv2/srrv2.sh`"

echo2 "> Applying crontab"
crontab /hive/etc/crontab.root


echo2 "> Caching host resolve"
cache-hive-ip

echo2 "> Saying hello to server"
hello boot
[[ -e $RIG_CONF ]] &&
	. $RIG_CONF #will be needed to start WD later


# Setup locale maybe on the very first run
[[ ! -z $SYSTEM_LANG ]] &&
	locale-setup "$SYSTEM_LANG" &&
	export $SYSTEM_LANG

#AMD OC in hivex now
#Nvidia OC will be run by xinit


echo2 "> Starting agent screen"
agent-screen dontattach


#remove previous log file for Nvidia OC
[[ -e /var/log/nvidia-oc.log ]] && rm /var/log/nvidia-oc.log



if [[ $X_DISABLED != 1 ]]; then
	echo2 "> Starting HiveX"
	systemctl start hivex

	#give X server some time or nvidia-settings could throw an error
	#amd-oc also there
	sleep 7

	#Apply Nvidia OC before miner or it can hang on 13+ GPUs
	eval `cat $NVIDIA_OC_CONF | grep '^RUNNING_DELAY'` #import only 1 variable
	if [[ $GPU_COUNT_NVIDIA > 0 && -e $NVIDIA_OC_CONF && -z $RUNNING_DELAY ]]; then
		#wait for oc only if RUNNING_DELAY is empty, otherwise we count on manual waiting delay
		if [[ -z `pidof xinit` ]]; then
			echo2 "xinit process not found, will not wait for Nvidia OC"
			break
		else
			for i in {1..30}; do #wait for nvidia-oc-log to start at least and create a file
				[[ -e /var/log/nvidia-oc.log ]] && break #file exists already
				echo2 "Waiting for /var/log/nvidia-oc.log... $i"
				sleep 1
			done

			for i in {1..300}; do
				#root     11463  0.0  0.0  15572  3136 ?        S    00:28   0:00 /bin/bash /hive/sbin/nvidia-oc
				nvrunning=`ps aux | grep /hive/sbin/nvidia-oc | grep -v grep | wc -l`

				[[ $nvrunning == 0 ]] && break

				echo2 "Waiting for nvidia-oc to complete... $i"
				sleep 1
			done
		fi
	fi
fi


if [[ $MAINTENANCE -eq 1 ]]; then
	echo2 "> Maintenance mode. Miner and software watchdog are disabled"
else
	echo2 "> Starting miner"
	miner start



	#Start Watchdog. It will exit if its 0
	[[ $WD_ENABLED == 1 ]] &&
		echo2 "> Hashrate Watchdog enabled" &&
		wd start
fi



echo2 "> Starting autofan"
autofan

#k10temp for cpu temp
modprobe k10temp
if [ $(modinfo k10temp | grep alias | wc -l) -lt 12 ]; then
	echo2 "> Installing k10temp module"
	#nohup /hive/opt/k10temp/install.sh > /dev/null 2>&1 &
	/hive/opt/k10temp/install.sh
fi


echo2 "> Hive Start Finished"


if [[ $X_DISABLED = 1 ]]; then
	amd-oc-safe
	systemctl restart hive-console
fi

exit 0
