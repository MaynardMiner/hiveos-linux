#!/usr/bin/env bash
#Send stats, receives commands


INTERVAL=10
LOG="/var/log/hive-agent.log"

API_TIMEOUT=15 #timeout to wait for miner API response, can take very long time on 13+ gpus


LAST_OK=$(( $(date +%s) - 86100 ))
force_stop=0


[ -t 1 ] && . colors

#$PPID - might be parent screen pid
screen_count=`screen -ls | grep "\.agent" | grep -v $PPID | wc -l`

#there will be still 1 process for subshell
#[[ `ps aux | grep "./agent" | grep -vE "grep|screen|SCREEN|$$" | wc -l` > 1 ]] &&
[[ $screen_count > 0 ]] &&
	echo -e "${RED}Agent screen is already running${NOCOLOR}\nRun ${CYAN}agent-screen${NOCOLOR} to resume screen" &&
	exit 1



function process_gpu_detect_json() {
	#{"temp":["61","42","41"],"fan":["92","0","0"],"load":["92","0","0"],"busids":["01:00.0","03:00.0","05:00.0"]}
	#Nvidia indexes in aa [1,2,3] to use in jsons
	#nvidia_indexes=echo "$gpu_stats" | jq '.brand | to_entries[] | select(.value == "nvidia") | .key' | jq -sc '.'
	#nvidia_indexes=`gpu-detect listjson | jq '. | to_entries[] | select(.value.brand == "nvidia") | .key' | jq -sc '.'`
	#gpu_detect_json=`gpu-detect listjson`


	if [[ $1 == "redetect" || ! -e $GPU_DETECT_JSON ]]; then #this is needed only when upgrading version. later we can remove this
		gpu-detect listjson > $GPU_DETECT_JSON
	fi
	gpu_detect_json=`cat $GPU_DETECT_JSON`
	[[ -z $gpu_detect_json ]] &&
		echo "gpu_detect_json was empty after reading" > /run/hive/agent-no-gpu-detect
	amd_indexes_array=$(jq -c '[ . | to_entries[] | select(.value.brand == "amd") | .key ]' <<< "$gpu_detect_json")
	nvidia_indexes_array=$(jq -c '[ . | to_entries[] | select(.value.brand == "nvidia") | .key ]' <<< "$gpu_detect_json")
	cpu_indexes_array=$(jq -c '[ . | to_entries[] | select(.value.brand == "cpu") | .key ]' <<< "$gpu_detect_json")
}


gpu_stats=
gpu_detect_json=

process_gpu_detect_json

########################################################################################################################

function miner_stats {
	local miner=$1
	local mindex=$2 #empty or 2, 3, 4, ...

	khs=0
	stats=

	local MINER_DIR=/hive/miners/$miner
	if [[ -e $MINER_DIR/h-stats.sh ]]; then
		source $MINER_DIR/h-manifest.conf
		source $MINER_DIR/h-config.sh
		source $MINER_DIR/h-stats.sh
	else
		echo -e "${YELLOW}$MINER_DIR/h-stats.sh does not exist${NOCOLOR}"
		miner="unknown"
		eval "MINER${mindex}=unknown"
	fi


	[[ -z $khs ]] && khs=0
	[[ -z $stats ]] && stats="null"

#	[[ ! -z $mindex ]] &&
#		eval "khs${mindex}"
}

########################################################################################################################

. agent.do_command.sh

########################################################################################################################

function reset_miner_vars() {
	#reset all miner vars
	MINER=
	for i in {2..32}; do
		eval unset MINER$i
	done
}



# Waits for new stats to appear in file
function wait-for-gpu-stats() {
  local max_tries=0
  [[ $PUSH_INTERVAL -gt 50 ]] && PUSH_INTERVAL=50
	local tosleep=$(( $PUSH_INTERVAL - $INTERVAL ))
	if [[ $tosleep -ge 0 ]]; then
		max_tries=$(($tosleep*2))
		for (( i=1; i<=$max_tries; i++)); do
			echo -n '.'
			sleep 0.5
		done
	fi

	local i=
	max_tries=$(($INTERVAL*2*2))
	for (( i=1; i<=$max_tries; i++)); do
		local mtime=`stat -c %Y /run/hive/gpu-stats.json`
		[[ -z $mtime ]] && mtime=0

		local now=`date +%s`
		local stats_age=$(( $now - $mtime ))

		#echo "stats_age=$stats_age"
		echo -n '.'
		if [[ $stats_age -le 1 ]]; then #gotcha!
			gpu_stats=`cat /run/hive/gpu-stats.json`
			echo -en " ${GREEN}+"
			return
		elif [[ $i == $max_tries && $stats_age -ge 70 ]]; then #it seems gpu-stats hanged for more than 1.5 minutes
		 	gpu_stats='{}'
			echo -en " ${RED}hanged gpu-stats?"
		 	return
		elif [[ $i == $max_tries ]]; then #&& $stats_age -ge $(($INTERVAL*2))  #too long to wait for it, giving up. taking old value
			gpu_stats=`cat /run/hive/gpu-stats.json`
			echo -en " ${YELLOW}gave up waiting"
			return
		fi

		sleep 0.5
	done
}


# Main loop cycle
function loop {
	#In some rare cases he have empty stats array
	DT=86400

	no_link=$(( $(date +%s) - $LAST_OK ))
	if [[ $no_link -gt $DT ]]; then
		miner stop
		wd stop
		if [[ $force_stop -eq 0 ]]; then
			force_stop=1
			echo "[`date`] No connection with API server. Stop the miner" >> $LOG
		fi
	fi


	[[ -z $gpu_detect_json ]] && process_gpu_detect_json redetect

	[ ! -f $RIG_CONF ] && echo -e "No config $RIG_CONF" && return

	reset_miner_vars

	#each time read config again
	. $RIG_CONF
	. $WALLET_CONF


	[[ -z $MINER ]] && MINER="claymore"
	HIVE_URL="$HIVE_HOST_URL/worker/api"

	echo -en "${YELLOW}"
	wait-for-gpu-stats
	echo -en "\n"
	echo -en "${NOCOLOR}"
	date

	[[ -z $gpu_stats ]] && gpu_stats='{}'
	local temp=$(jq '.temp' <<< $gpu_stats)
	local fan=$(jq '.fan' <<< $gpu_stats)
	local power=$(jq '.power' <<< $gpu_stats)

#	miner2_json=
#	if [[ ! -z $MINER2 ]]; then
#		miner_stats $MINER2 2
#		khs2=$khs
#		miner2_json=$(jq -n --arg miner2 "$MINER2" --arg total_khs2 "$khs" --argjson miner_stats2 "$stats" \
#			'{"params": {$miner2, $total_khs2, $miner_stats2}}')
#	fi

	# Get other miners stats
	local mindex
	for mindex in {32..2}; do
		eval minerval=\$MINER$mindex
		if [[ ! -z $minerval ]]; then
			miner_stats $minerval $mindex
			eval khs$mindex=\$khs
			miner_json=$(jq -n -c \
				--arg miner$mindex "$minerval" \
				--arg total_khs$mindex "$khs" \
				--argjson miner_stats$mindex "$stats" \
				'{"params": {$miner'$mindex', $total_khs'$mindex', $miner_stats'$mindex'}}')
			eval miner${mindex}_json="\$miner_json"
		else
			eval miner${mindex}_json=
		fi
	done


	miner_stats $MINER #khs and stats are global

	echo -en "Hashrate ${CYAN}$MINER${NOCOLOR} `[[ $khs > 0 ]] && echo -e ${YELLOW} || echo -e ${RED}`$khs${NOCOLOR} kH/s"
	for mindex in {2..32}; do
		#[[ ! -z $MINER2 ]] &&
		#	echo -en " ${CYAN}$MINER2${NOCOLOR} `[[ $khs2 > 0 ]] && echo -e ${YELLOW} || echo -e ${RED}`$khs2${NOCOLOR} kH/s"
		eval minerval=\$MINER$mindex
		if [[ ! -z $minerval ]]; then
			eval khs_i=\$khs$mindex
			echo -en ", ${CYAN}$minerval${NOCOLOR} `[[ $khs_i > 0 ]] && echo -e ${YELLOW} || echo -e ${RED}`$khs_i${NOCOLOR} kH/s"
		fi
	done

	echo -en "\n"
	echo $khs > $HASHRATE_KHS



	#echo $stats
	#uptime: load averages for the past 1, 5, and 15 minutes

	[[ ! -z $META ]] && meta="$META" || meta='null'
	request=$(
	jq -n \
	--arg rig_id "$RIG_ID" \
	--arg passwd "$RIG_PASSWD" \
	--arg miner "$MINER" \
	--argjson meta "$meta" \
	--argjson miner_stats "$stats" \
	--arg total_khs "$khs" \
	--argjson temp "$temp" \
	--argjson fan "$fan" \
	--argjson power "$power" \
	--arg df "`df -h / | awk '{ print $4 }' | tail -n 1 | sed 's/%//'`" \
	--argjson mem "`free -m | grep 'Mem' | awk '{print "["$2","$4"]"}'`" \
	--argjson cpuavg "[`uptime | awk -F': ' '{print $2}'`]" \
	'{
		"method": "stats", "jsonrpc": "2.0", "id": 0,
		"params": {
			$rig_id, $passwd, $miner, $meta, $miner_stats, $total_khs,
			$temp, $fan, $power, $df, $mem, $cpuavg
		}
	}'
	)


	# Add other miners stats to json
	for mindex in {2..32}; do
		#[[ ! -z $miner2_json ]] && #add miner2 stats to json
		#	request=`echo "$request" "$miner2_json" | jq -s '.[0] * .[1]'`
		eval miner_json="\$miner${mindex}_json"
		[[ ! -z $miner_json ]] && #add miner2 stats to json
			request=`echo "$request" "$miner_json" | jq -s '.[0] * .[1]'`
	done


	echo $request | jq '.' -c

	if [[ -z $RIG_ID ]]; then
		echo -e "${YELLOW}No RIG_ID, skipping sending stats${NOCOLOR}"
		return
	fi

	#log request
	echo "[`date`] > `echo $request | jq '.' -c`" >> $LOG
	#echo "[`date`] > $request" >> $LOG

	response=$(echo $request | curl --insecure -L --data @- \
	--connect-timeout 7 --max-time 15 --silent \
	-XPOST "${HIVE_URL}?id_rig=$RIG_ID&method=stats"  -H "Content-Type: application/json")

	exitcode=$?
	if [[ $exitcode -ne 0 || -z $response ]]; then
		echo -e "${RED}Error sending stats${NOCOLOR} $HIVE_HOST_URL" && human-curl-error $exitcode
		echo "[`date`] < ERROR SENDING STATS TO $HIVE_HOST_URL (curl code=$exitcode) \"$response\"" >> $LOG
		return $exitcode
	fi

	#echo $response
	#echo "[`date`] < `echo $response | jq '.' -c`" >> $LOG
	echo "[`date`] < $response" >> $LOG #full response even invalid

	error=$(echo $response | jq '.error' --raw-output)
	[[ $? != 0 ]] && echo -e "${RED}Invalid response${NOCOLOR}: $HIVE_HOST_URL\n$response" && return 1
	[[ ! -z $error && $error != "null" ]] && echo -e "${RED}Error response${NOCOLOR}: $error" && return 1

	LAST_OK=$(date +%s)
	if [[ $force_stop -eq 1 ]]; then
		miner start
		wd start
		force_stop=0
		echo "[`date`] Ð¡onnection with API server is OK. Start miner" >> $LOG
	fi

	command=$(echo $response | jq '.result.command' --raw-output)

	[[ $command != "OK" ]] && echo "$response" | jq '.result'


	if [[ $command != "batch" ]]; then
		body=`echo $response | jq -c '.result'`
		do_command
	else
		count=`echo $response | jq '.result.commands|length'`
		echo "Got $count batch commands"
		for (( i=0; i < $count; i++ )); do
			body=`echo $response | jq -c ".result.commands[$i]"`
			command=
			do_command
		done
	fi
}


########################################################################################################################

echo -e "\n\n[`date`] Started" >> $LOG

while true; do
	time_start=`date +%s`
	loop
	sleep 2 #to make sure we will not grab the same gpu-stats file
	continue

	#sleeping is controlled also by agent.gpu-stats now


#	time_finish=`date +%s`
#
#
#	wasted=$(( $time_finish - $time_start ))
#	tosleep=$(( $INTERVAL - $wasted )) #let's wake 2 seconds before the next potential
#
#	#echo ""
#
#	if [[ $tosleep -ge 0 ]]; then
#		echo "Sleeping $tosleep"
#		#sleep $INTERVAL
#		read -t $tosleep
#	else
#		echo -e "${YELLOW}WARNING: Stats collecting time > $INTERVAL seconds, hanging driver?${NOCOLOR}"
#	fi
done
