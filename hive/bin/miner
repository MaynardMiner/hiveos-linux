#!/usr/bin/env bash

MINER_LOGS_BASE_DIR=/var/log/miner

function usage() {
	bname=`basename $0`
	echo -e "Usage: ${CYAN}$bname start|stop|restart|log|logrotate|logtruncate${NOCOLOR}"
	echo -e "If you run ${CYAN}$bname${NOCOLOR} without parameters miner screen will be tried to resume."
}


#[ -t 1 ] &&
. colors

#[ -z $1 ] && usage && exit 1


if [ ! -f $RIG_CONF ]; then
	echo -e "${RED}No config $RIG_CONF${NOCOLOR}"
else
	. $RIG_CONF
fi

[[ -e $WALLET_CONF ]] && . $WALLET_CONF

[[ -z $MINER ]] && MINER="claymore" && echo -e "${YELLOW}No miner set in config, will use default ${CYAN}\"claymore\"${NOCOLOR}"


#HARDCODE FIX
function fix_sgminer_gm() {
	local mindex=
	local minerval=
	for mindex in {1..32}; do
		[[ $mindex == 1 ]] && mindex=
		eval minerval=\$MINER$mindex
		if [[ ! -z $minerval ]]; then
			[[ $minerval == "sgminer-gm" ]] &&
				eval MINER$mindex="sgminer"
		fi
	done
}
fix_sgminer_gm


#sgminer-gm is deprecated...
#miners_avail=("claymore" "claymore-z" "claymore-x" "ewbf" "ccminer" "ethminer" "sgminer" "sgminer-gm" "dstm" "bminer" "lolminer" "optiminer" "xmr-stak" "xmrig" "cpuminer-opt" "custom")
#if ! printf '%s\n' "${miners_avail[@]}" | grep -xq $MINER ; then
#	echo -e "${RED}Unknown miner $MINER${NOCOLOR}"
#	message error "Unknown miner $MINER"
#	exit 1
#fi

#if [[ ! -d /hive/miners/$MINER ]]; then
#	echo -e "${RED}Unknown miner $MINER${NOCOLOR}"
#	message error "Unknown miner $MINER"
#	exit 1
#fi



########################################################################################################################

function start() {
	amd-oc-safe > /dev/null #be silent

	session_count=`screen -ls miner | grep miner | wc -l`
	if [[ $session_count > 0 ]]; then
		echo -e "${RED}Miner screen is already running${NOCOLOR}"
		echo -e "Run ${CYAN}miner${NOCOLOR} or ${CYAN}screen -r${NOCOLOR} to resume screen"
		return
	fi

	echo -en "Starting ${CYAN}$MINER${NOCOLOR}"
	#[[ ! -z $MINER2 ]] &&
	#	echo -en " and ${CYAN}$MINER2${NOCOLOR}"
	local mindex
	for mindex in {2..32}; do
		eval minerval=\$MINER$mindex
		[[ ! -z $minerval ]] &&
			echo -en ", ${CYAN}$minerval${NOCOLOR}"
	done
	echo -en "\n"

	#screen -dm -S miner bash -c "${MINER}; bash"
	#hack to preselect window 1
	#yes, empty bash or it will hang from time to time if start with screen miner instantly
	screen -dm -c /hive/etc/screenrc.miner bash
	for i in {1..25}; do
		sleep 0.2 #it needs some time? it happens that you'll have "No screen session found" without sleep
		session_count=`screen -ls miner | grep miner | wc -l`
		[[ $session_count > 0 ]] && break #echo -e "Found screen miner in $i iterations" &&
		[[ $i == 25 ]] && echo -e "${RED}screen miner not found in 25 iterations, check logs and maybe flash drive speed${NOCOLOR}"
	done

	#[[ ! -z $MINER2 ]] &&
	#	screen -S miner -X screen 2 $MINER2
	for mindex in {32..2}; do
		eval minerval=\$MINER$mindex
		[[ ! -z $minerval ]] &&
			sleep 0.2 && #to allow to grab dpkg lock
			screen -S miner -X screen $mindex miner-run $minerval &&
			screen -S miner -X title $minerval #set nice title
	done

	screen -S miner -X screen 1 miner-run $MINER &&
	screen -S miner -X title $MINER #set nice title
}


function stop() {
	#echo -e "Stopping ${CYAN}$MINER${NOCOLOR}"

#	screen -S miner -Q select .
#	if [ $? -eq 0 ] ; then
#		echo "Screen exists"
#		screen -r -S miner
#		exit
#	fi

	#screen -S miner -X quit

	screens=`screen -ls miner | grep -E "[0-9]+\.miner" | cut -d. -f1 | awk '{print $1}'`

	if [[ -z $screens ]]; then
		echo "No miner screens found"
	else
		for pid in $screens; do
			echo "Stopping screen session $pid"
			screen -S $pid -X quit
		done
	fi

	#remove khs so no confusing for watchdog
	#[[ -e /run/hive/khs ]] && rm /run/hive/khs
	#wd gets mtime of file, no problem
}


function miner_log_basename {
	local miner=$1
	[[ -z $miner ]] && echo "No miner given to miner_log_basename" && return 1

	log_basename=""

	if [[ -e /hive/miners/$miner/h-manifest.conf ]]; then
		source /hive/miners/$miner/h-manifest.conf
		[[ -z $MINER_LOG_BASENAME ]] && MINER_LOG_BASENAME=/var/log/miner/$MINER_NAME/$MINER_NAME
	fi

	# Special miner
	if [[ $miner == "custom" ]]; then
		if [[ -z $CUSTOM_MINER ]]; then
			echo -e "${RED}\$CUSTOM_MINER is not defined${NOCOLOR}"
			return 1
		elif [[ -e /hive/miners/custom/$CUSTOM_MINER/h-manifest.conf ]]; then
			source /hive/miners/custom/$CUSTOM_MINER/h-manifest.conf
		fi
		if [[ -z $CUSTOM_LOG_BASENAME ]]; then
			echo -e "${RED}\$CUSTOM_LOG_BASENAME is not defined${NOCOLOR}"
			return 1
		else
			MINER_LOG_BASENAME=$CUSTOM_LOG_BASENAME
		fi
	fi

	if [[ -z $MINER_LOG_BASENAME ]]; then
		echo -e "${RED}\$MINER_LOG_BASENAME is not defined${NOCOLOR}"
		return 1
	else
		log_basename=$MINER_LOG_BASENAME
	fi


	echo $log_basename
	return 0
}

function log_tail {
	local TAIL_LINE=80

	local suffix=1
	[[ ! -z $1 ]] && #second miner
		suffix=$1

	tail -n $TAIL_LINE /run/hive/miner.$suffix
	return

	#-----------------------------------------------------------
	log_basename=`miner_log_basename $MINER`
	if [[ $? > 0 ]]; then
		echo $log_basename #show error message
		return
	fi

	logname="${log_basename}.log"

	if [[ ! -e $logname ]]; then
		echo "Log $logname does not exist yet"
		return
	fi

	if [[ `ls -l $logname | awk '{print $5}'` -le 1 ]]; then #can be 1, empty line
		echo "Log $logname is empty"
		return
	fi


	echo "$logname last $TAIL_LINE lines:"
	echo ""
	tail -n $TAIL_LINE $logname | sed "s,$(printf '\033')\\[[0-9;]*[a-zA-Z],,g" #sed removes colors
}


function miner_echo_config_file() {
	echo -e "${YELLOW}=== $1 =================================================${NOCOLOR}"
	cat $1
	echo ""
}

#Shows miner config
function config() {
	MINER_DIR=/hive/miners/$MINER

	if [[ ! -e $MINER_DIR/h-manifest.conf ]]; then
		echo -e "${RED}$MINER_DIR/h-manifest.conf does not exist${NOCOLOR}";
		return 1
	fi
	if [[ ! -e $MINER_DIR/h-config.sh ]]; then
		echo -e "${RED}$MINER_DIR/h-config.sh does not exist${NOCOLOR}";
		return 1
	fi

	source $MINER_DIR/h-config.sh
	source $MINER_DIR/h-manifest.conf

	miner_config_echo
}




function logs_rotate {
	log_basename=`miner_log_basename $1`
	if [[ $? > 0 ]]; then
		echo $log_basename #show error message
		return 1
	fi

	# Make sure logs dir exists
	mkdir -p $MINER_LOGS_BASE_DIR/$1

	[[ -e $log_basename.5.log ]] && rm $log_basename.5.log
	[[ -e $log_basename.4.log ]] && mv -f $log_basename.4.log $log_basename.5.log
	[[ -e $log_basename.3.log ]] && mv -f $log_basename.3.log $log_basename.4.log
	[[ -e $log_basename.2.log ]] && mv -f $log_basename.2.log $log_basename.3.log
	[[ -e $log_basename.1.log ]] && mv -f $log_basename.1.log $log_basename.2.log
	[[ -e $log_basename.log ]] && mv -f $log_basename.log $log_basename.1.log

	return 0
}



#truncates current log, run by cron
function log_truncate {
	#MAX_LOG_SIZE=$(( 10 * 1024 * 1024 ))
	MAX_LOG_SIZE=10000000 #10m

	log_basename=`miner_log_basename $1`
	if [[ $? > 0 ]]; then
		echo $log_basename #show error message
		return 1
	fi

	[[ ! -e $log_basename.log ]] && return 0

	fsize=`stat -c%s $log_basename.log`
	[[ ! -z $fsize && $fsize -ge $MAX_LOG_SIZE ]] &&
		echo "" >  $log_basename.log

	return 0
}



# Sets MINER to MINER2 if requested
function check_second_miner {
	local mindex=$1 #empty or 2, 3, 4, ...
	[[ -z $1 || $1 -eq 1 ]] && return #not a second miner request

	eval minerval=\$MINER$mindex
	[[ -z $minerval ]] &&
		echo "Miner #$mindex is not configured" &&
		exit 1

	MINER=$minerval #substitute MINER var with second miner
}


########################################################################################################################

case $1 in
	start)
		start
	;;
	stop)
		stop
	;;
	restart)
#		echo -e "Restarting ${CYAN}$MINER${NOCOLOR}"
		echo -e "${YELLOW}Restarting miner${NOCOLOR}" #can be different on miner change
		stop
		#need some time to finish it seems
		sleep 1
		start
	;;
	config) #miner config 2
		check_second_miner $2
		config
	;;
	log) #miner log 2 //can be 2 for other miner, log from miner.1 or miner.2!!!
		check_second_miner $2
		log_tail $2
	;;
	logrotate) #miner logrotate claymore
		logs_rotate $2
	;;
	logtruncate) #miner logtruncate 2
		check_second_miner $2
		log_truncate $MINER
	;;
	logtruncateall) #miner logtruncate 2
		log_truncate $MINER
		for mindex in {2..32}; do
			eval minerval=\$MINER$mindex
			if [[ ! -z $minerval ]]; then
				log_truncate $minerval
			fi
		done
	;;
#	logdirscreate)
#		for minername in ${miners_avail[@]}; do
#			mkdir -p $MINER_LOGS_BASE_DIR/$minername
#		done
#	;;
	*)
		screen -x -S miner
		[[ $? != 0 ]] && usage
	;;
esac
